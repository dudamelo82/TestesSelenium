// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class CT01EnviarMensagemTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void cT01EnviarMensagem() {
    // Test name: CT01EnviarMensagem 
    // Step # | name | target | value | comment
    // 1 | open | https://inoveteste.com.br/ |  | 
    driver.get("https://inoveteste.com.br/");
    // 2 | click | css=.qodef-vertical-align-containers:nth-child(1) .qodef-icon-font-elegant |  | 
    driver.findElement(By.cssSelector(".qodef-vertical-align-containers:nth-child(1) .qodef-icon-font-elegant")).click();
    // 3 | click | css=#sticky-nav-menu-item-5643 .item_text |  | 
    driver.findElement(By.cssSelector("#sticky-nav-menu-item-5643 .item_text")).click();
    // 4 | click | name=nome |  | 
    driver.findElement(By.name("nome")).click();
    // 5 | assertElementPresent | name=nome |  | 
    {
      List<WebElement> elements = driver.findElements(By.name("nome"));
      assert(elements.size() > 0);
    }
    // 6 | assertElementPresent | name=email |  | 
    {
      List<WebElement> elements = driver.findElements(By.name("email"));
      assert(elements.size() > 0);
    }
    // 7 | assertElementPresent | name=assunto |  | 
    {
      List<WebElement> elements = driver.findElements(By.name("assunto"));
      assert(elements.size() > 0);
    }
    // 8 | assertElementPresent | name=mensagem |  | 
    {
      List<WebElement> elements = driver.findElements(By.name("mensagem"));
      assert(elements.size() > 0);
    }
    // 9 | click | name=nome |  | 
    driver.findElement(By.name("nome")).click();
    // 10 | type | name=nome | Duda Melo | 
    driver.findElement(By.name("nome")).sendKeys("Duda Melo");
    // 11 | type | name=email | Dudamelo82@gmail.com | 
    driver.findElement(By.name("email")).sendKeys("Dudamelo82@gmail.com");
    // 12 | type | name=assunto | Valor do livro impresso | 
    driver.findElement(By.name("assunto")).sendKeys("Valor do livro impresso");
    // 13 | type | name=mensagem | Qual o valor do livro impresso para o cep 70765050? | 
    driver.findElement(By.name("mensagem")).sendKeys("Qual o valor do livro impresso para o cep 70765050?");
    // 14 | click | css=div:nth-child(5) .wpcf7-form-control |  | 
    driver.findElement(By.cssSelector("div:nth-child(5) .wpcf7-form-control")).click();
    // 15 | pause | 3000 |  | 
    try {
      Thread.sleep(3000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}
